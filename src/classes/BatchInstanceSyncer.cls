global class BatchInstanceSyncer implements Database.Batchable<sObject>,Database.AllowsCallouts {        public String auditorKey = [select id,name, Key__c from KayakoAuditorKey__c limit 1][0].Key__c;   List<Zuora__Subscription__c>zsList = new List<Zuora__Subscription__c>();        global Database.QueryLocator start(Database.BatchableContext BC) {                              String query='select id,name,Zuora__Zuora_Id__c,Zuora__Status__c,Instance__r.Expiry_date__c,Instance__r.UUID__c,InstanceID__c,sync__c from Zuora__Subscription__c where  	Zuora__Status__c = \'Active\' and Product_Name__r.Name = \'Kayako 4 OnDemand\' and Sync__c =false';            return Database.getQueryLocator(query);                  }                        public static Boolean runningInASandbox() {return [SELECT Id, IsSandbox FROM Organization LIMIT 1].IsSandbox;}                     global void execute(Database.BatchableContext BC, List<Zuora__Subscription__c> scope) {                      String debug = '';Boolean k5 = false;                      for(Zuora__Subscription__c zs: scope){debug ='';k5 = false;                       Http auditorDriver = new Http();           String auditorUrl = '';            String uid = zs.Instance__r.UUID__c;                                                                      auditorurl='https://my.kayako.com/api/index.php?/v1/instances/'+uid+'/sync';                                                                     HttpRequest auditorRequest = new HttpRequest();             auditorRequest.setEndpoint(auditorUrl);             auditorRequest.setMethod('PUT');             auditorRequest.setHeader('ACCESSKEY', 'test');             String timestamp = String.valueOf(DateTime.Now().getTime()/1000);             auditorRequest.setHeader('TIMESTAMP',timestamp);             String shasign3 = EncodingUtil.ConverttoHex(Crypto.generateDigest('SHA1', Blob.valueOf('test'+auditorkey+timestamp)));             auditorRequest.setHeader('HASH',shasign3);auditorRequest.setHeader('content-type', 'application/json');             auditorrequest.setTimeout(120000);                                  String expirydate = String.valueOf(zs.Instance__r.Expiry_date__c.getTime()/1000);                 String json ='{';                 HttpResponse response3 = new HttpResponse ();                 json = json+'"subscription_id":"'+zs.Zuora__Zuora_Id__c+'"';                 json = json+',"type":"soft"}';                 auditorRequest.setBody(json);               if(!Test.isRunningTest()) {               response3 = auditorDriver.send(auditorRequest);                                     System.debug('the json is'+json);                 String res3 = '';                 res3 = String.valueOf(response3.getBody());                 System.debug('response is'+res3);               }                      zs.sync__c = true;                                        zsList.add(zs);                                        Messaging.EmailFileAttachment csvAttc = new Messaging.EmailFileAttachment();                    Blob csvBlob = Blob.valueOf(debug);                    String csvname= zs.instance__r.id+'.csv';                    Messaging.SingleEmailMessage email =new Messaging.SingleEmailMessage();                    String[] toAddresses = new list<string> {'sagar.pareek@kayako.com'};                    String subject ='Sync Result '+zs.Instance__r.id+'.csv';                    email.setSubject(subject);                    email.setToAddresses( toAddresses );                    email.setPlainTextBody(zs.Instance__r.id+'Debug log');                                        Messaging.SendEmailResult [] r = Messaging.sendEmail(new Messaging.SingleEmailMessage[] {email});                            }              update zsList;            }                        global void finish(Database.BatchableContext BC) {      }      }